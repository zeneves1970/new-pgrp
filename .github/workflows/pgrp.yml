name: Monitor News

on:
  schedule:
    - cron: '*/15 * * * *'  # Executar a cada 15 minutos

concurrency:
  group: monitor-news  # Evita execuções paralelas
  cancel-in-progress: true  # Cancela a execução anterior se uma nova for disparada

jobs:
  monitor_news:
    runs-on: ubuntu-latest
    steps:
      # Passo 1: Fazer o checkout do repositório
      - name: Checkout do repositório
        uses: actions/checkout@v3

      # Passo 2: Configurar Python
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.x'
          cache: 'pip'

      # Passo 3: Instalar dependências
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Passo 4: Restaurar cache do arquivo seen_links.txt
      - name: Restaurar cache
        uses: actions/cache@v3
        with:
          path: seen_links.txt
          key: seen-links-${{ runner.os }}-v1
          restore-keys: |
            seen-links-${{ runner.os }}-
            seen-links-

      # Passo 5: Criar arquivo seen_links.txt, se não existir
      - name: Garantir existência do arquivo seen_links.txt
        run: |
          if [ ! -f seen_links.txt ]; then
            touch seen_links.txt
            echo "Arquivo 'seen_links.txt' criado vazio."
          fi
        shell: bash

      # Passo 6: Executar o script de monitoramento
      - name: Executar o monitor
        run: python monitor_pgrp.py
        env:
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}

      # Passo 7: Atualizar cache do arquivo seen_links.txt
      - name: Atualizar cache
        uses: actions/cache@v3
        with:
          path: seen_links.txt
          key: seen-links-${{ runner.os }}-v1
