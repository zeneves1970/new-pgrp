name: Send Emails on New Links

on:
  push:
    branches:
      - main
  schedule:
    - cron: "*/15 * * * *"

jobs:
  process:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: python -m pip install --upgrade pip && python -m pip install -r requirements.txt

      - name: Ensure seen_links.txt Exists
        run: touch seen_links.txt

      - name: Acquire Lock
        id: lock
        run: |
          if [[ ! -f .lock ]]; then
            touch .lock
            echo "::set-output name=locked::true"
          else
            echo "::set-output name=locked::false"
          fi

      - name: Generate Cache Key
        id: cache-key
        if: steps.lock.outputs.locked == 'true'
        run: echo "::set-output name=key::${{ runner.os }}-seen-links-cache-$(sha256sum seen_links.txt 2>/dev/null || echo 'empty')"

      - name: Restore Cache
        uses: actions/cache@v3
        if: steps.lock.outputs.locked == 'true'
        with:
          path: seen_links.txt
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys:
            ${{ runner.os }}-seen-links-cache-

      - name: Run Script
        if: steps.lock.outputs.locked == 'true'
        env:
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
        run: python3 pgrp.py

      - name: Save Cache
        uses: actions/cache@v3
        if: steps.lock.outputs.locked == 'true' && steps.cache-key.outputs.key != null
        with:
          path: seen_links.txt
          key: ${{ steps.cache-key.outputs.key }}

      - name: Release Lock
        if: steps.lock.outputs.locked == 'true'
        run: rm -f .lock
