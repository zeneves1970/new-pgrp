name: Send Emails on New Links

on:
  push:
    branches:
      - main
  schedule:
    - cron: "*/15 * * * *"  # Executar a cada 15 minutos

jobs:
  process:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: python -m pip install --upgrade pip && python -m pip install -r requirements.txt

      - name: Ensure seen_links.txt Exists (Manter)
        run: |
          if [ ! -f seen_links.txt ]; then
            touch seen_links.txt
          fi

      # Gerar a chave do cache (dinamicamente durante a execução)
      - name: Generate Cache Key
        id: cache-key
        run: echo "::set-output name=key::$(sha256sum seen_links.txt 2>/dev/null || echo 'empty')"

      - name: Restore Cache (Use dynamic key)
        uses: actions/cache@v3
        with:
          path: seen_links.txt
          key: ${{ runner.os }}-seen-links-cache-${{ steps.cache-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-seen-links-cache-

      - name: Debug - Show seen_links.txt Before Script (Manter)  # (Opcional)
        run: cat seen_links.txt || echo "seen_links.txt does not exist"

      - name: Run Script
        env:
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
        run: python3 pgrp.py

      - name: Save Cache (Explicitamente após o script)  # (Importante!)
        uses: actions/cache@v3
        if: steps.cache-key.outputs.key != null
        with:
          path: seen_links.txt
          key: ${{ runner.os }}-seen-links-cache-${{ steps.cache-key.outputs.key }}

      - name: Debug - Show seen_links.txt After Script (Manter)  # (Opcional)
        run: cat seen_links.txt || echo "seen_links.txt is empty"
