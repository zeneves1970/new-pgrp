name: Monitor News

on:
  schedule:
    - cron: '*/15 * * * *'  # Executar a cada 15 minutos

concurrency:
  group: monitor-news  # Define um grupo para evitar execuções paralelas
  cancel-in-progress: true  # Cancela o workflow anterior se um novo for disparado

jobs:
  monitor_news:
    runs-on: ubuntu-latest
    steps:
      # Passo 1: Fazer o checkout do repositório
      - name: Checkout do repositório
        uses: actions/checkout@v3

      # Passo 2: Restaurar o cache para o arquivo seen_links.txt
      - name: Restaurar cache
        uses: actions/cache@v3
        with:
          path: seen_links.txt  # Caminho para o arquivo de cache
          key: monitor-pgrp-seen-links-${{ runner.os }}  # Usar uma chave fixa para o cache
          restore-keys: |
            monitor-pgrp-seen-links-${{ runner.os }}-
            monitor-pgrp-seen-links-  # Tentativas de restauração em caso de cache não encontrado

      # Passo 3: Configurar Python
      - name: Configurar Python
        uses: actions/setup-python@v4  # Usando a versão mais recente
        with:
          python-version: 3.10
      
      - name: Confirmar versão do Python
        run: python --version

      # Passo 4: Instalar dependências
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Usando requirements.txt para instalar as dependências

      # Passo 5: Executar o monitor
      - name: Executar o monitor
        run: python monitor_pgrp.py
        env:
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}

      # Passo 6: Atualizar o cache
      - name: Atualizar cache
        uses: actions/cache@v3
        with:
          path: seen_links.txt  # Caminho para o arquivo que deve ser armazenado no cache
          key: monitor-pgrp-seen-links-${{ runner.os }}  # Usar a mesma chave de cache